# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: application test, push to prod branche then build production image and send to dockerhub

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      
#       - name: create env file
#         run: |
#           touch .env
#           echo COOKIE_SECRET= ${{ secrets.COOKIE }} >> .env
#           echo POSTGRES_HOST = "127.0.0.1" >> .env
#           echo POSTGRES_TEST_PORT = 5432 >> .env
#           echo POSTGRES_PORT = 5432 >> .env
#           echo POSTGRES_USER= ${{ secrets.POSTGRES_USER }} >> .env
#           echo POSTGRES_DB= ${{ secrets.POSTGRES_DB }} >> .env
#           echo POSTGRES_PASSWORD= ${{ secrets.POSTGRES_PASSWORD }} >> .env
      
      - name: Start containers
        run: docker-compose -f "docker-compose.yml" up -d --build

      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: Install dependencies
        run: |
          npm install
          npm ci
        
      - name: build
        run: npm run build
      
      - name: test
        run: npm run test

      - name: Stop containers
        if: always()
        run: docker-compose -f "docker-compose.yml" down
    
      - name: Send Notification to Slack
        if: always()
        id: slack
        uses: slackapi/slack-github-action@v1.23.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": "GitHub Action Test result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "GitHub Action Test result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                }
              ]
            }
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        
  merge-master-into-prod:
    environment: development
    permissions: write-all
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@master

      - name: Merge master -> production
        uses: devmasx/merge-branch@master
        with:
          type: now
          from_branch: master
          target_branch: production
          github_token: ${{ github.token }}
      
  build-production:
    environment: production
    runs-on: ubuntu-latest
    steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        push: true
        tags: secure_coding:latest
    - name: Send Notification to Slack
      if: always()
      id: slack
      uses: slackapi/slack-github-action@v1.23.0
      with:
        # For posting a rich message using Block Kit
        payload: |
          {
            "text": "GitHub Action Deploy Production to Docker Hub result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "GitHub Action Deploy Production to Docker Hub result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
